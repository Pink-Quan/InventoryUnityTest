//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inventory/Script/InventoryInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InventoryInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InventoryInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InventoryInput"",
    ""maps"": [
        {
            ""name"": ""GetKey"",
            ""id"": ""6a4a31f4-aa5c-423f-9380-e1dd60fa6cb1"",
            ""actions"": [
                {
                    ""name"": ""LeftShift"",
                    ""type"": ""Button"",
                    ""id"": ""b5bbd473-2acb-4729-b186-42675eb0f3d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightMouse"",
                    ""type"": ""Button"",
                    ""id"": ""11c1ea3b-c061-421d-8512-ad2b802cd43f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftMouse"",
                    ""type"": ""Button"",
                    ""id"": ""4214d8c4-7fc9-4968-96c7-13943a4901b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""243258db-8ccb-4c73-bf2c-e3233d6db618"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftShift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""114c3fd5-6b98-4232-b0ef-8d5ebb7c50ad"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93dc173c-2914-4bc0-ba58-daa07e7c7e64"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GetKey
        m_GetKey = asset.FindActionMap("GetKey", throwIfNotFound: true);
        m_GetKey_LeftShift = m_GetKey.FindAction("LeftShift", throwIfNotFound: true);
        m_GetKey_RightMouse = m_GetKey.FindAction("RightMouse", throwIfNotFound: true);
        m_GetKey_LeftMouse = m_GetKey.FindAction("LeftMouse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GetKey
    private readonly InputActionMap m_GetKey;
    private IGetKeyActions m_GetKeyActionsCallbackInterface;
    private readonly InputAction m_GetKey_LeftShift;
    private readonly InputAction m_GetKey_RightMouse;
    private readonly InputAction m_GetKey_LeftMouse;
    public struct GetKeyActions
    {
        private @InventoryInput m_Wrapper;
        public GetKeyActions(@InventoryInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftShift => m_Wrapper.m_GetKey_LeftShift;
        public InputAction @RightMouse => m_Wrapper.m_GetKey_RightMouse;
        public InputAction @LeftMouse => m_Wrapper.m_GetKey_LeftMouse;
        public InputActionMap Get() { return m_Wrapper.m_GetKey; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GetKeyActions set) { return set.Get(); }
        public void SetCallbacks(IGetKeyActions instance)
        {
            if (m_Wrapper.m_GetKeyActionsCallbackInterface != null)
            {
                @LeftShift.started -= m_Wrapper.m_GetKeyActionsCallbackInterface.OnLeftShift;
                @LeftShift.performed -= m_Wrapper.m_GetKeyActionsCallbackInterface.OnLeftShift;
                @LeftShift.canceled -= m_Wrapper.m_GetKeyActionsCallbackInterface.OnLeftShift;
                @RightMouse.started -= m_Wrapper.m_GetKeyActionsCallbackInterface.OnRightMouse;
                @RightMouse.performed -= m_Wrapper.m_GetKeyActionsCallbackInterface.OnRightMouse;
                @RightMouse.canceled -= m_Wrapper.m_GetKeyActionsCallbackInterface.OnRightMouse;
                @LeftMouse.started -= m_Wrapper.m_GetKeyActionsCallbackInterface.OnLeftMouse;
                @LeftMouse.performed -= m_Wrapper.m_GetKeyActionsCallbackInterface.OnLeftMouse;
                @LeftMouse.canceled -= m_Wrapper.m_GetKeyActionsCallbackInterface.OnLeftMouse;
            }
            m_Wrapper.m_GetKeyActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftShift.started += instance.OnLeftShift;
                @LeftShift.performed += instance.OnLeftShift;
                @LeftShift.canceled += instance.OnLeftShift;
                @RightMouse.started += instance.OnRightMouse;
                @RightMouse.performed += instance.OnRightMouse;
                @RightMouse.canceled += instance.OnRightMouse;
                @LeftMouse.started += instance.OnLeftMouse;
                @LeftMouse.performed += instance.OnLeftMouse;
                @LeftMouse.canceled += instance.OnLeftMouse;
            }
        }
    }
    public GetKeyActions @GetKey => new GetKeyActions(this);
    public interface IGetKeyActions
    {
        void OnLeftShift(InputAction.CallbackContext context);
        void OnRightMouse(InputAction.CallbackContext context);
        void OnLeftMouse(InputAction.CallbackContext context);
    }
}
